<Entity extends="std.display.Image2D">
	<_States>
		
		<_State id="name"><Value>Shape Indicator</Value></_State>
		<_State id="2DMeshImageForm"><Value>circle_n</Value></_State>
		
		<_State id="physicsEntity"><Value>false</Value></_State>
		<_State id="opacity"><Value>0</Value></_State>
		<_State id="spaceX"><Value>975</Value></_State>
		<_State id="spaceY"><Value>71</Value></_State>
		<_State id="scaleX"><Value>0.8</Value></_State>
		<_State id="scaleY"><Value>0.8</Value></_State>
		<State><Id>jiggle</Id><Type>Boolean</Type><Value>false</Value></State>
	</_States>
	
	
	<_Actions>
		<Action>
			<Id>Init</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.set('rotation',0);
					me.set('jiggle',false);
					
					var l_pathShape = e('Game Manager').s('currentGame');
					
					me.set('2DMeshImageForm',l_pathShape+'_n');
					
					me.set('animate_opacity',{from:0, to:1, seconds:0.6, easing:Ease.quadInOut});
					
					var l_duration = 1;
					
					me.set('animate_scaleX',{type:"to", to:1.15, seconds:l_duration, easing:Ease.quadInOut});
					me.set('animate_scaleY',{type:"to", to:1.15, seconds:l_duration, easing:Ease.quadInOut});
					me.sa('WaitFor',{delay:l_duration, delayCurrent:0, cbEntity:me,cbAction:"Jiggle Left"});
					
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Jiggle Left</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_duration = 0.7;
					
					me.set('animate_rotation',{type:"to", to:22, seconds:l_duration, easing:Ease.quadInOut});
					me.sa('WaitFor',{delay:l_duration, delayCurrent:0, cbEntity:me,cbAction:"Jiggle Right"});
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Jiggle Right</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_duration = 0.7;
					me.set('animate_rotation',{type:"to", to:-22, seconds:l_duration, easing:Ease.quadInOut});
					
					
					if (me.s('jiggle')==false)
					{
						
						me.sa('WaitFor',{delay:l_duration, delayCurrent:0, cbEntity:me,cbAction:"Jiggle Left"});
						me.set('jiggle',true);
					}
					else
					{
						me.sa('WaitFor',{delay:l_duration, delayCurrent:0, cbEntity:me,cbAction:"Back to Normal"});
					}
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Back to Normal</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_duration = 1.5;
					
					me.set('animate_scaleX',{type:"to", to:0.8, seconds:l_duration, easing:Ease.quadInOut});
					me.set('animate_scaleY',{type:"to", to:0.8, seconds:l_duration, easing:Ease.quadInOut});
					
					me.set('animate_rotation',{type:"by", by:720+22, seconds:l_duration, easing:Ease.quadInOut});
				</Script>
			</Scripts>
		</Action>
				
				
		<Action>
			<Id>WaitFor</Id>
			<Concurrency>Transient</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>