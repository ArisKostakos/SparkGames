<Entity extends="std.display.Image2D">
	<_States>
		<_State id="2DMeshImageForm"><Value>tileImage</Value></_State>
		<_State id="spaceWidth"><Value>170</Value></_State>
		<_State id="spaceHeight"><Value>135</Value></_State>
		
		<State><Id>obj_shapeNormal</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>obj_shapeSelected</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>obj_shine</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>obj_tileWrong</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>shape</Id><Type>Text</Type><Value>Undefined</Value></State>
			
		<State><Id>mazeX</Id><Type>Integer</Type><Value>-1</Value></State>
		<State><Id>mazeY</Id><Type>Integer</Type><Value>-1</Value></State>
	
		<State><Id>near</Id><Type>Dynamic</Type><Value>null</Value></State>
		<State><Id>dirs</Id><Type>Dynamic</Type><Value>null</Value></State>
	
		<State><Id>path</Id><Type>Boolean</Type><Value>false</Value></State>
		<State><Id>dirty</Id><Type>Boolean</Type><Value>false</Value></State>
		<State><Id>nick</Id><Type>Text</Type><Value>Undefined</Value></State>
		<State><Id>visited</Id><Type>Boolean</Type><Value>false</Value></State>
		<State><Id>firstTile</Id><Type>Boolean</Type><Value>false</Value></State>
		<State><Id>lastTile</Id><Type>Boolean</Type><Value>false</Value></State>
	
		<_State id="physicsEntity"><Value>false</Value></_State>
		<_State id="touchable"><Value>true</Value></_State>
	</_States>
	
	<_Form><_Space><_Entities>
		<!-- Shine -->
		<Entity extends="std.display.Spritesheet2D">
			<_States>
				<_State id="2DMeshSpritesheetForm"><Value>tile</Value></_State>
				<_State id="visible"><Value>false</Value></_State>
				<_State id="AnimationLoop"><Value>false</Value></_State>
				<_State id="spaceX"><Value>;170/2</Value></_State>
				<_State id="spaceY"><Value>;135/2</Value></_State>
			</_States>
			<_Actions>
				<_Action id="Constructor">
					<_Scripts>
						<Script>
							parent.set('obj_shine',me);
						</Script>
					</_Scripts>
				</_Action>
			</_Actions>
		</Entity>
	
		<!-- Tile Wrong -->
		<Entity extends="std.display.Image2D">
			<_States>
				<_State id="physicsEntity"><Value>false</Value></_State>
				<_State id="2DMeshImageForm"><Value>wrongTile</Value></_State>
				<_State id="opacity"><Value>0</Value></_State>
				<_State id="spaceX"><Value>;170/2</Value></_State>
				<_State id="spaceY"><Value>;135/2</Value></_State>
			</_States>
			<_Actions>
				<_Action id="Constructor">
					<_Scripts>
						<Script>
							parent.set('obj_tileWrong',me);
						</Script>
					</_Scripts>
				</_Action>
			</_Actions>
		</Entity>
		
		<!-- Shape Normal -->
		<Entity extends="std.display.Image2D">
			<_States>
				<_State id="touchable"><Value>false</Value></_State>
				<_State id="physicsEntity"><Value>false</Value></_State>
				<_State id="2DMeshImageForm"><Value>circle_n</Value></_State>
				<_State id="spaceX"><Value>;170/2</Value></_State>
				<_State id="spaceY"><Value>;135/2</Value></_State>
				<_State id="opacity"><Value>0</Value></_State>
			</_States>
			<_Actions>
				<_Action id="Constructor">
					<_Scripts>
						<Script>
							parent.set('obj_shapeNormal',me);
						</Script>
					</_Scripts>
				</_Action>
			</_Actions>
		</Entity>
	
		<!-- Shape Selected -->
		<Entity extends="std.display.Image2D">
			<_States>
				<_State id="touchable"><Value>false</Value></_State>
				<_State id="physicsEntity"><Value>false</Value></_State>
				<_State id="2DMeshImageForm"><Value>circle_s</Value></_State>
				<_State id="spaceX"><Value>;170/2</Value></_State>
				<_State id="spaceY"><Value>;135/2</Value></_State>
				<_State id="opacity"><Value>0</Value></_State>
			</_States>
			<_Actions>
				<_Action id="Constructor">
					<_Scripts>
						<Script>
							parent.set('obj_shapeSelected',me);
						</Script>
					</_Scripts>
				</_Action>
			</_Actions>
		</Entity>
	</_Entities></_Space></_Form>
		
	<_Triggers>
		<Trigger>
			<Event>MouseLeftClick</Event>
			<Scripts>
				<Script>
					//e('Maze Area').fa('Clear');
					//me.fa('Show Near');
					
					if (e('Game Manager').s('gameRunning')==false)
						return;
					
					if (e('Player').s('bouncing')==true || e('Player').s('walking')==true)
						return;
						
					//Get Characters current Tile
					var l_character = e('Player');
					var l_currentTile = l_character.s('currentTile');
					var l_ctDirs = l_currentTile.s('dirs');
					
					if (me==l_ctDirs.get('left'))
					{
						l_character.fa('Move To Tile',{ tile:me, direction:'left' } );
					}
					else if (me==l_ctDirs.get('right'))
					{
						l_character.fa('Move To Tile',{ tile:me, direction:'right' } );
					}
					else if (me==l_ctDirs.get('up'))
					{
						l_character.fa('Move To Tile',{ tile:me, direction:'up' } );
					}
					else if (me==l_ctDirs.get('down'))
					{
						l_character.fa('Move To Tile',{ tile:me, direction:'down' } );
					}
					else
					{
						Display.de("Tile Clicked is not a neighbor tile.. play a noise or smth..");
						
						//Play FX
						e('Audio Control').fa('Play FX', { name:"fx:negative", weak:false } );
						
						
						
						l_character.set('bouncing',true);
						l_character.set('wrongTile',me);
						l_character.setState('animate_y',{type:"by", by:-25, seconds:0.4, easing:Ease.quadInOut});
						l_character.sa('WaitFor',{delay:0.4, cbEntity:l_character, cbAction:"Bounce Down 1"});
						me.fa("Wrong Start");
						
						//Remove direction from possible moves
						//e('arrow_'+l_direction).set('visible',false);
					}
				</Script>
			</Scripts>
		</Trigger>
	</_Triggers>
		
	<_Actions>
		<Action>
			<Id>Shine</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var obj_shine = me.s('obj_shine');
					var l_obj_player = obj_shine.s('obj_player');
					
					obj_shine.set('visible',true);
					l_obj_player.play();
					
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Wrong Start</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.s('obj_tileWrong').set('animate_opacity',{type:"to", to:1, seconds:0.4, easing:Ease.quadInOut});
				</Script>
			</Scripts>
		</Action>
				
				
		<Action>
			<Id>Wrong End</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.s('obj_tileWrong').set('animate_opacity',{type:"to", to:0, seconds:0.4, easing:Ease.quadInOut});
				</Script>
			</Scripts>
		</Action>
		
		<_Action id="Constructor">
			<_Scripts>
				<Script><![CDATA[
					var x = me.s('mazeX');
					var y = me.s('mazeY');
					var near = [];
					var dirs = new StringMap();
					var mazeArea = e('Maze Area');
					var maze = mazeArea.s('maze');
					var mazeWidth=mazeArea.s('mazeWidth');
					var mazeHeight=mazeArea.s('mazeHeight');
					
					//If I am last Tile, make me invisible
					if (x==mazeWidth-1 && y==mazeHeight-1)
					{
						me.set('visible',false);
						me.set('firstTile',true);
					}
					else if (x==0 && y==0)
					{
						me.set('lastTile',true);
					}
					
					me.set('spaceX',x*(me.s('spaceWidth')));
					me.set('spaceY',y*(me.s('spaceHeight')));
					
					me.set('nick','x'+Std.string(x)+'y'+Std.string(y));
					
					
					//Creating Neighbors
					
					//Left Neighbor
					if (x>0)
					{
						var neighbor = maze[x-1][y];
						
						dirs.set('left',neighbor);
						near.push(neighbor);
					}
					
					//Right Neighbor
					if (x<mazeWidth-1)
					{
						var neighbor = maze[x+1][y];
						
						dirs.set('right',neighbor);
						near.push(neighbor);
					}
					
					//Up Neighbor
					if (y>0)
					{
						var neighbor = maze[x][y-1];
						
						dirs.set('up',neighbor);
						near.push(neighbor);
					}
					
					//Down Neighbor
					if (y<mazeHeight-1)
					{
						var neighbor = maze[x][y+1];
						
						dirs.set('down',neighbor);
						near.push(neighbor);
					}
					
					me.set('near',near);
					me.set('dirs',dirs);
				]]></Script>
			</_Scripts>
		</_Action>
			
		<Action>
			<Id>Show Near</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//for (tile of me.s('near'))
					//	tile.fa('Select');
					
					var dirs = me.s('dirs');
					
					if (dirs.exists("left"))
						dirs.get('left').fa('Select');
						
					if (dirs.exists("right"))
						dirs.get('right').fa('Select');
						
					if (dirs.exists("up"))
						dirs.get('up').fa('Select');
						
					if (dirs.exists("down"))
						dirs.get('down').fa('Select');
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Visited</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.set('visited',true);
					
					var l_obj_shapeSelected = me.s('obj_shapeSelected');
					
					l_obj_shapeSelected.set('animate_opacity',{type:"to", to:1, seconds:0.4, easing:Ease.quadInOut});
					
					me.fa('Shine');
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Select</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					//
					
					return;
					me.set('2DMeshFillRectForm','[selected]');
				</Script>
			</Scripts>
		</Action>
	
		<Action>
			<Id>Deselect</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.s('obj_shapeNormal').set('opacity',0);
					me.s('obj_shapeSelected').set('opacity',0);
				</Script>
			</Scripts>
		</Action>
	
		<Action>
			<Id>Init</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var l_pathShape = e('Game Manager').s('currentGame');
					
					if (me.s('path'))
					{
						me.s('obj_shapeNormal').set('2DMeshImageForm',l_pathShape+'_n');
						me.s('obj_shapeSelected').set('2DMeshImageForm',l_pathShape+'_s');
					}
					else
					{
						var l_allShapes = ['circle','square','triangle','heart','star','diamond'];
						var l_randomShape = '';
						
						do
							l_randomShape= l_allShapes[ Logic.random(0,l_allShapes.length-1) ];
						while (l_randomShape==l_pathShape)
						
						me.s('obj_shapeNormal').set('2DMeshImageForm',l_randomShape+'_n');
						me.s('obj_shapeSelected').set('2DMeshImageForm',l_randomShape+'_s');
					}
					
					
					//me.s('obj_shapeNormal').set('opacity',1);
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>WaitFor</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
				
		<Action>
			<Id>Show</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//me.s('obj_shapeNormal').set('opacity',1);
					me.s('obj_shapeNormal').set('animate_opacity',{from:0, to:1, seconds:1, easing:Ease.backOut});
					
					//Play FX
					e('Audio Control').fa('Play FX', { name:"fx:shapePop" } );
					
					me.fa('Shine');
				</Script>
			</Scripts>
		</Action>
				
		<Action>
			<Id>Hide</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					//me.s('obj_shapeNormal').set('opacity',1);
					me.s('obj_shapeNormal').set('animate_opacity',{type:"to", to:0, seconds:1, easing:Ease.backOut});
					me.s('obj_shapeSelected').set('animate_opacity',{type:"to", to:0, seconds:1, easing:Ease.backOut});
				</Script>
			</Scripts>
		</Action>
	</_Actions>
</Entity>