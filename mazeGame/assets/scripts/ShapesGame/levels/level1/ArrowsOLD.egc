<Entity extends="std.display.Sprite2D">
	<_States>
		<_State id="name"><Value>Arrows</Value></_State>
		<_State id="opacity"><Value>0</Value></_State>
		<State><Id>bright</Id><Type>Boolean</Type><Value>false</Value></State>
		<_State id="visible"><Value>false</Value></_State>
	</_States>
	
	<Form><Space><Entities>
		<!-- Left -->
		<Entity extends="std.display.Image2D">
			<_States>
				<_State id="name"><Value>arrowLeft</Value></_State>
				<_State id="physicsEntity"><Value>false</Value></_State>
				<_State id="2DMeshImageForm"><Value>arrow</Value></_State>
				<_State id="spaceX"><Value>-80</Value></_State>
				<_State id="spaceY"><Value>0</Value></_State>
				<_State id="scaleX"><Value>0.75</Value></_State>
				<_State id="scaleY"><Value>0.75</Value></_State>
			</_States>
		</Entity>
		
		<!-- Right -->
		<Entity extends="std.display.Image2D">
			<_States>
				<_State id="name"><Value>arrowRight</Value></_State>
				<_State id="physicsEntity"><Value>false</Value></_State>
				<_State id="2DMeshImageForm"><Value>arrow</Value></_State>
				<_State id="spaceX"><Value>80</Value></_State>
				<_State id="spaceY"><Value>0</Value></_State>
				<_State id="scaleX"><Value>0.75</Value></_State>
				<_State id="scaleY"><Value>0.75</Value></_State>
				<_State id="rotation"><Value>180</Value></_State>
			</_States>
		</Entity>
		
		<!-- Up -->
		<Entity extends="std.display.Image2D">
			<_States>
				<_State id="name"><Value>arrowUp</Value></_State>
				<_State id="physicsEntity"><Value>false</Value></_State>
				<_State id="2DMeshImageForm"><Value>arrow</Value></_State>
				<_State id="spaceX"><Value>0</Value></_State>
				<_State id="spaceY"><Value>-50</Value></_State>
				<_State id="scaleX"><Value>0.75</Value></_State>
				<_State id="scaleY"><Value>0.75</Value></_State>
				<_State id="rotation"><Value>90</Value></_State>
			</_States>
		</Entity>
		
		<!-- Down -->
		<Entity extends="std.display.Image2D">
			<_States>
				<_State id="name"><Value>arrowDown</Value></_State>
				<_State id="physicsEntity"><Value>false</Value></_State>
				<_State id="2DMeshImageForm"><Value>arrow</Value></_State>
				<_State id="spaceX"><Value>0</Value></_State>
				<_State id="spaceY"><Value>50</Value></_State>
				<_State id="scaleX"><Value>0.75</Value></_State>
				<_State id="scaleY"><Value>0.75</Value></_State>
				<_State id="rotation"><Value>270</Value></_State>
			</_States>
		</Entity>
	</Entities></Space></Form>
		
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script>
					me.fa('Toggle');
				</Script>
			</_Scripts>
		</_Action>
		
		<Action>
			<Id>Toggle</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					var duration = 1;
					
					if (me.s('bright'))
					{
						me.setState('animate_opacity',{type:"to", to:0.3, seconds:duration, easing:Ease.quadInOut});
						e('arrowLeft').setState('animate_x',{type:"to", to:-80, seconds:duration, easing:Ease.quadInOut});
						e('arrowRight').setState('animate_x',{type:"to", to:80, seconds:duration, easing:Ease.quadInOut});
						e('arrowUp').setState('animate_y',{type:"to", to:-50, seconds:duration, easing:Ease.quadInOut});
						e('arrowDown').setState('animate_y',{type:"to", to:50, seconds:duration, easing:Ease.quadInOut});
						me.sa('WaitFor',{delay:duration, cbEntity:me, cbAction:"Toggle"});
						me.set('bright',false);
					}
					else
					{
						me.setState('animate_opacity',{type:"to", to:0.7, seconds:duration, easing:Ease.quadInOut});
						
						e('arrowLeft').setState('animate_x',{type:"to", to:-80-15, seconds:duration, easing:Ease.quadInOut});
						e('arrowRight').setState('animate_x',{type:"to", to:80+15, seconds:duration, easing:Ease.quadInOut});
						e('arrowUp').setState('animate_y',{type:"to", to:-50-15, seconds:duration, easing:Ease.quadInOut});
						e('arrowDown').setState('animate_y',{type:"to", to:50+15, seconds:duration, easing:Ease.quadInOut});
						
						me.sa('WaitFor',{delay:duration, cbEntity:me, cbAction:"Toggle"});
						me.set('bright',true);
					}
				</Script>
			</Scripts>
		</Action>
		
		<Action>
			<Id>Init</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script>
					//forced
					
					me.set('visible',true);
					var player = e('Player');
					
					if (it.s('query'))
					{
						me.set('spaceX', query(player,'x'));
						me.set('spaceY', query(player,'y')+60);
					}
					else
					{
						me.set('spaceX', player.s('spaceX'));
						me.set('spaceY', player.s('spaceY')+60);
					}
					
					Display.de('playerX: ' + player.s('spaceX'));
					Display.de('playerY: ' + player.s('spaceY'));
					
					//Get Characters current Tile
					var l_currentTile = player.s('currentTile');
					var l_ctDirs = l_currentTile.s('dirs');
					
					if (l_ctDirs.exists('left') && !l_ctDirs.get('left').s('visited'))
						e('arrowLeft').set('visible',true);
					else
						e('arrowLeft').set('visible',false);
						
					if (l_ctDirs.exists('right') && !l_ctDirs.get('right').s('visited'))
						e('arrowRight').set('visible',true);
					else
						e('arrowRight').set('visible',false);
						
					if (l_ctDirs.exists('up') && !l_ctDirs.get('up').s('visited'))
						e('arrowUp').set('visible',true);
					else
						e('arrowUp').set('visible',false);
						
					if (l_ctDirs.exists('down') && !l_ctDirs.get('down').s('visited'))
						e('arrowDown').set('visible',true);
					else
						e('arrowDown').set('visible',false);
				</Script>
			</Scripts>
			<States>
				<State><Id>query</Id><Type>Boolean</Type><Value>false</Value></State>
			</States>
		</Action>
			
		<Action>
			<Id>WaitFor</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
				    it.addToState('delayCurrent',Logic.getDt());
				    
				    if (it.getState('delayCurrent')>it.getState('delay'))
				    {
					    it.stop();
					    
					    //Callback (Action finished)
						it.setState('delayCurrent',0);
						it.s('cbEntity').fa(it.s('cbAction'));
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>delayCurrent</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>delay</Id><Type>Decimal</Type><Value>0</Value></State>
				<State><Id>cbEntity</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>cbAction</Id><Type>Text</Type><Value>Undefined</Value></State>
			</States>
		</Action>
	</_Actions>
</Entity>