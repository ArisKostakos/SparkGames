<Entity extends="std.display.Sprite2D">
	<_States>
		<_State id="name"><Value>Maze Area</Value></_State>
		<_State id="spaceX"><Value>;2280/2-520</Value></_State>
		<_State id="spaceY"><Value>;1440/2-210</Value></_State>
		<State><Id>maze</Id><Type>Dynamic</Type><Value>[]</Value></State>
		<State><Id>mazeWidth</Id><Type>Integer</Type><Value>7</Value></State> <!-- 7 -->
		<State><Id>mazeHeight</Id><Type>Integer</Type><Value>6</Value></State> <!-- 6 -->
		<_State id="touchable"><Value>true</Value></_State>
		<State><Id>Creating</Id><Type>Boolean</Type><Value>false</Value></State>
		<State><Id>pathLength</Id><Type>Integer</Type><Value>0</Value></State>
	</_States>

	<Form><Space><Entities>

	</Entities></Space></Form>
	
	<_Actions>
		<_Action id="Constructor">
			<_Scripts>
				<Script><![CDATA[
				
					//Create Tiles (not the maze)
					var xSize=me.s('mazeWidth');
					var ySize=me.s('mazeHeight');
					var l_maze = me.s('maze');
				
					for (var x=0;x<xSize;x++)
					{
						l_maze.push([]);
						for (var y=0;y<ySize;y++)
						{
							var l_tile = Logic.create('ShapesGame.levels.level1.MazeTile');
							l_tile.set('mazeX',x);
							l_tile.set('mazeY',y);
							me.addChild(l_tile);
							
							l_maze[x].push(l_tile);
						}
					}
				]]></Script>
			</_Scripts>
		</_Action>
			
		<Action>
			<Id>Show Maze Shapes</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//e('Game Manager').s('currentGame')
					
					it.stop();
					
					var mazeWidth=me.s('mazeWidth');
					var mazeHeight=me.s('mazeHeight');
					var l_maze = me.s('maze');
				
					var count=0;
					
					/*
					for (var x=0;x<mazeWidth;x++)
						for (var y=0;y<mazeHeight;y++)
						{
							var l_tile = l_maze[x][y];
							
							count+=0.2;
							
							l_tile.fa('Init');
							l_tile.s('obj_shapeNormal').set('animate_opacity',{from:0, to:1, seconds:1+count, easing:Ease.backOut});
						}
					*/
					
					for (var y=0;y<mazeHeight;y++)
						for (var x=0;x<mazeWidth;x++)
						{
							var l_tile = l_maze[x][y];
							
							count+=0.03;
							
							l_tile.fa('Init');
							
							l_tile.sa('WaitFor',{delay:count, cbEntity:l_tile, cbAction:"Show"});
						}
					
				]]></Script>
			</Scripts>
		</Action>
			
		<Action>
			<Id>Shine Maze</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					var mazeWidth=me.s('mazeWidth');
					var mazeHeight=me.s('mazeHeight');
					var l_maze = me.s('maze');
				
					//var count=0;
					
					/*
					for (var x=0;x<mazeWidth;x++)
						for (var y=0;y<mazeHeight;y++)
						{
							var l_tile = l_maze[x][y];
							
							count+=0.2;
							
							l_tile.fa('Init');
							l_tile.s('obj_shapeNormal').set('animate_opacity',{from:0, to:1, seconds:1+count, easing:Ease.backOut});
						}
					*/
					
					for (var y=0;y<mazeHeight;y++)
						for (var x=0;x<mazeWidth;x++)
						{
							var l_tile = l_maze[x][y];
							
							//count+=0.015;
							
							
							l_tile.sa('WaitFor',{delay:(x+y)*0.05, cbEntity:l_tile, cbAction:"Shine"});
						}
				]]></Script>
			</Scripts>
		</Action>
	
		<Action>
			<Id>Hide Maze Shapes</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//e('Game Manager').s('currentGame')
					
					it.stop();
					
					var mazeWidth=me.s('mazeWidth');
					var mazeHeight=me.s('mazeHeight');
					var l_maze = me.s('maze');
				
					var count=0;
					
					/*
					for (var x=0;x<mazeWidth;x++)
						for (var y=0;y<mazeHeight;y++)
						{
							var l_tile = l_maze[x][y];
							
							count+=0.2;
							
							l_tile.fa('Init');
							l_tile.s('obj_shapeNormal').set('animate_opacity',{from:0, to:1, seconds:1+count, easing:Ease.backOut});
						}
					*/
					
					for (var y=0;y<mazeHeight;y++)
						for (var x=0;x<mazeWidth;x++)
						{
							var l_tile = l_maze[x][y];
							
							count+=0.03;
							
							
							l_tile.sa('WaitFor',{delay:count, cbEntity:l_tile, cbAction:"Hide"});
						}
					
				]]></Script>
			</Scripts>
		</Action>
	
		<Action>
			<Id>Create Path</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					//functions
					function getLegitNears(tile)
					{
						var legits = [];
						
						//Legit directions are determined as followed:
						
						//a)must be a block
						//for (nTile of tile.s('near'))  DOES NOT WORK ON IE
						for (nTile in tile.s('near')) //WORKS ON IE BUT I DONT LIKE IT
						{
							nTile = tile.s('near')[nTile]; //WORKS ON IE BUT I DONT LIKE IT
						
							//b)block cannot be path
							if (!nTile.s('path'))
							{
								
								//b)block cannot a neighbor to the path
								if (!nTile.s('dirty'))
								{
									//c)block must pass the following algorithm test:
										//find path from that block to goal block.
											//algorithm considers only blocks that are not path, or neighbors of path.
											//I guess this algorithm can be brute force? or dijkstra.. dijkstra I guess..
									if (nTile.s('nick')=='x0y0')
										legits.push(nTile);
									else
									{
										me.fa('Dijkstra',{ p_examineTile:nTile, p_currentTile:tile } );
										var dFeedback = me.getAction('Dijkstra').getState('feedback');
										
										if (dFeedback==true)
											legits.push(nTile);
									}
								}
							}
						}
						
						return legits;
					}
					
					
					//code
					me.set('Creating',true);
					Display.de("Creating...");
					me.set('pathLength',0);
					me.fa('Clear');
					
					var mazeWidth=me.s('mazeWidth');
					var mazeHeight=me.s('mazeHeight');
					var l_maze = me.s('maze');
					
					var currentX = mazeWidth-1;
					var currentY = mazeHeight-1;
					var currentTile = l_maze[currentX][currentY];
					while (true)
					{
					
						currentTile.set('path',true);
						me.addToState('pathLength',1);
						currentTile.fa('Select');
						//Display.de("CURRENT TILE: " + currentTile.s('nick'));
						
						//a) determine how many directions are legit
						var legitNears = getLegitNears(currentTile);
						//Display.de('found nears: ' + legitNears.length);
						
						if (legitNears.length>0)
							currentTile = legitNears[Logic.random(0, legitNears.length-1)];
						
						//Display.de("new CURRENT TILE: " + currentTile.s('nick'));
						
						//dirty the others
						//for (dTile of legitNears)  DOES NOT WORK ON IE
						for (dTile in legitNears) //WORKS ON IE BUT I DONT LIKE IT
						{
							dTile = legitNears[dTile]; //WORKS ON IE BUT I DONT LIKE IT
							
							if (dTile!=currentTile)
								dTile.set('dirty',true);
						}
						
						if (legitNears.length==0)
							break;
							
						if (currentTile.s('nick')=='x0y0')
						{
							currentTile.set('path',true);
							//me.addToState('pathLength',1);
							currentTile.fa('Select');
							//Display.de("CURRENT TILE: " + currentTile.s('nick'));
							break;
						}
					}
					
					Display.de("Creation Complete: " + me.s('pathLength'));
					
					if (me.s('pathLength')>=16)
					{
						Display.de("TOO BIG... Trying again..");
						me.fa('Create Path');
					}
					else
						me.set('Creating',false);
				]]></Script>
			</Scripts>
		</Action>
	
		<Action>
			<Id>Dijkstra</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					function isClear(cTile, exTile, curTile)
					{
						if (cTile.s('path')==false && cTile.s('dirty')==false)
						{
							if (cTile==exTile)
								return true;
							else
							{
								//for (llTile of curTile.s('near'))  DOES NOT WORK ON IE
								for (llTile in curTile.s('near')) //WORKS ON IE BUT I DONT LIKE IT
								{
									llTile = curTile.s('near')[llTile]; //WORKS ON IE BUT I DONT LIKE IT
						
									if (cTile==llTile)
									{
										return false;
									}
								}
								
								return true;
							}
						}
						else
							return false;
					}
					
					//console.log(window.Dijkstras);
					//return;
					
					var l_examineTile = it.s('p_examineTile');
					var l_currentTile = it.s('p_currentTile');
					
					
					var d = new Dijkstras();
					
					var l_graph = [];
					
					var mazeWidth=me.s('mazeWidth');
					var mazeHeight=me.s('mazeHeight');
					var l_maze = me.s('maze');
					
					var l_targetReachable=false;
					
					for (var x=0;x<mazeWidth;x++)
						for (var y=0;y<mazeHeight;y++)
						{
							var f_tile = l_maze[x][y];
							
							if (isClear(f_tile,l_examineTile,l_currentTile))
							{
								var l_node = [];
								
								l_node.push( f_tile.s('nick') );
								
								if (f_tile.s('nick')=='x0y0')
									l_targetReachable=true;
								
								var l_nodeConnections = [];
								
								l_node.push(l_nodeConnections);
								
								
								//for (sTile of f_tile.s('near'))  DOES NOT WORK ON IE
								for (sTile in f_tile.s('near')) //WORKS ON IE BUT I DONT LIKE IT
								{
									sTile = f_tile.s('near')[sTile]; //WORKS ON IE BUT I DONT LIKE IT
									
									if (isClear(sTile,l_examineTile,l_currentTile))
										l_nodeConnections.push( [sTile.s('nick'),10] );
								}
								
								
								l_graph.push(l_node);
							}
						}
					
					d.setGraph( l_graph );
					
					//Display.de("Examining " + l_examineTile.s('nick'));
					
					
					if (l_targetReachable)
					{
						var path = d.getPath(l_examineTile.s('nick'), 'x0y0');
						
						//console.log("dijkstra:",path);
						
						if (path.length>0)
							it.set('feedback',true);
						else
							it.set('feedback',false);
					}
					else
					{
						it.set('feedback',false);
					}
				]]></Script>
			</Scripts>
			<States>
				<State><Id>p_examineTile</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>p_currentTile</Id><Type>Dynamic</Type><Value>null</Value></State>
				<State><Id>feedback</Id><Type>Boolean</Type><Value>false</Value></State>
			</States>
		</Action>
	
	
		<Action>
			<Id>Clear</Id>
			<Concurrency>Persistent</Concurrency>
			<Scripts>
				<Script><![CDATA[
					//forced
					
					var xSize=me.s('mazeWidth');
					var ySize=me.s('mazeHeight');
					var l_maze = me.s('maze');
					
					for (var x=0;x<xSize;x++)
						for (var y=0;y<ySize;y++)
						{
							l_maze[x][y].fa('Deselect');
							l_maze[x][y].set('path',false);
							l_maze[x][y].set('dirty',false);
							l_maze[x][y].set('visited',false);
						}
				]]></Script>
			</Scripts>
		</Action>
	</_Actions>
</Entity>